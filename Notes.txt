---------------------    Styles in HTML     --------------------

- Styles are additional attributes defined for HTML elements to make the presentation more interactive and Responsive.
        <h2 align=""> Welcome</h2>

- Styles are applied to any HTML in 3 ways.
    1. Inline
    2. Embeded 
    3. External [CSS - Cascade Style Sheet]

Inline Styles:
--------------
    - syles are defined for every element individually by using a "style" attribute.
    syntax:
        <h1 style="color: red; text-align: center"></h1>

    - Inline styles are faster in rendering.
    - we can't re-use the styles.
    
    Note:
        If one is looking for styles without regular extensions[changes] and reusability then it is better to use Inline.
    
Embeded Styles:
---------------
    - styles are defined in an seperate <style> container and are kept in <head> or <body> section.

        <style>
            selector{
                attribute: value;
            }
        </style>

    - You can easily extend the styles and re-use the styles
    - But embedded styes are slow in rendering compared to inline styles
    - Embeded styles are only for a specific page. If you want the style across various pages then they are not available.
    
Note:
    - The MIME type [Multi Purpose Internet MAil Extension] for styles is 

            MIME type               Extension
            -------------           ----------------------------
            image/jpeg              .jpg, .jpeg, .jfif
            application/msword      .doc, .docx, .rtf, .txt

        - the MIME type is uesd by the rendering engine to process the code block written in page.
        - the MIME tyoe for CSS is "text/css".
    - The Media type for styles defines how to display various media content which includes screen, print and speech.
        - You can classify the content for different media devices.

        syntax:
            <style type="text/css" media=" all | screen | print | speech ">

            </style>


    - You can embed styles in both <head> and <body>. The difference between them is that the styles in head section are intended to
    load into browser momery and then accessed by page. Styles in body section are directly rendered into page, without loading into
    memory.

    - You can keep styles outside HTML scope but it is not recommended. 

Extenal styles:
---------------
    - You can write and save styles in a seperate styles style sheet with the extension ".css"
    - So that you can link the style sheet to any HTML page and access styles across pages.
    - You can use "Cascading Technique".[CSS]
    
    Note:
        - Using an external style sheet will increase the number of requests for a page and also page load time.

        - "Minification" is a coding technique followed by developers to reduce the size of the file.
          It is the process of writing logic with less code.
        - There are various minification tools, which one can use for compressing CSS file and reduce its size.

        ex: cssminifirer

        Unminified files  =>  for Development
        Minified files    =>  for production

        syntax:
                
                effects.css (unminified file)
            
            h2{
            background-color: red;
            color : white;
            text-align: center;
            }
                
                effects.min.css (minified file)
            
            h2{background-color:red; color:#fff;text-align:center;}

        - The Minified file can be modified, but it is not recommended. 
        - A "CDN" refers to "Content Delivery Network". By using CDN one can keep your CSS files in a seperate server and 
          access from any project.

----------------------  How styles take control over HTML Elements --------------

- If the styles are applied by in-line method then they are  directly directly to specific element.
        <div style="attribute:value"> </div>

- If the styles are applied by Embedded or External method then one needs the help of "Selector".
        <style type="text/css" media="all">
            Selector{

            }
        </style>


- Selector defines where to apply the given set of CSS attributes.
- Selectors are calssified into various groups
        1. Primary Selector
        2. Rational Selector
        3. Attribute Selector
        4. Structural Pseudo classes
        5. Dynamic Pseudo classes
        6. Element State Pseudo classes 
        7. Universal Selector
        8. Language Selector 
        9. Root Selector

    Primary Selector:
    -----------------
        There are three types of these Selectors
            1.Type selector
            2. ID selector
            3. Class Selector

        Type Selector:
        ----------------
            - It defines the element node name [p, b, i, img, blockquote...].
            - It will apply to every occurance of that element in page.
            - You can't ignore for any specific occurance.
            
            syntax:
                h1{                         
                    ......;
                }
            
                p{
                    .......;
                  }

        ID Selector:
        -------------
            - It is defined by using "#" reference name
            - It is accessed by using "id" attribute.
            
            syntax:
                #refName{
                    ....;
                }

                <div id="refName"> </div>

            - You can apply effects only to the required element.
            - Every element can use only "one" ID reference.
            - Hence you can't apply multiple sets of effects to one Element.

        Class Selector:
        ---------------
            - It defines effects by using ".className" reference.
            - You can access and apply by using "Class" attribute.

            Syntax:
                .className{
                    ........;
                }

                <div class="className"> </div>

            - Every element can use Multiple classes, Which are seperated with a black space.
Note:
------
    - If any element is defined with all 3 selectors, then the set of effects that will apply are as follows
    - If same set of attributes are defined then the effects will apply according to priority
            1st ID Selectors
            2nd Class Selectors
            3rd Type Selectors
    - If different set of attributes are defined then all are applied.

    - If any element is defined with styles from inline, embedded and external file techniques, then the set of effects that are applied as follows
    - If same set of attributes are defined in all 3 locations then it will apply according to priority 
            1st Inline
        `	2nd Embedded
            3rd External
    - If differrent set of attributes are defined then all are applied.
    - If similar effects are defined in embedded and external file, then it is defined by using occurance order.[LIFO] Last-In-First-Out.

    Dynamic Pseudo Classes:
    -----------------------
        - Dynamic refers to styles applied to element according to state and situation.
        - Pseudo refers to false representaion 
                link => anchor
        - class is a program template, which comprises of sample data and logic that you can implement and costumise according to requirement.
        - It allows to configure certain actions without manually writing any logic.
        - CSS Dynamic Pseudo classes are 
            :hover	 => It defines effects when mouse pointer is over the element.
            :active  => It defines effects when mouse button is down on any element.
            :link	 => It defines effects when for hyperlink in normal state.
            :target  => It defines effects when element is target of any link.
            :visited => It sets effects for visited links.

    Element State Pseudo Classes:
    ------------------------------
        :checked   => It defines effects when a radio or check box is checked
        :focus     => It defines effects when element gets focus
        :disabled  => It defines effects when element is disabled
        :enabled   => It defines effects when element disabled is false
        :read-only => It defines effects when element is set with read-only.

    Validation State Pseudo Classes:
    --------------------------------
        :required       => If element is defined with required attribute
        :optional       => If element is not defined with required
        :in-range       => If value is with in specified range [min & max]
        :out-of-range   => If value is out of range [lower and upper bound]
        :invalid        => If any validation failed
        :valid          => If validation evaluates success.

    Structural Pseudo Classes:
    ---------------------------
        :nth-chid()           =>It selects specific child by using level number or occurance name[even,odd]
                     syntax:
                            nth-child(4){

                            }
                            nth-child(even | odd){
                                        
                            }         

        :first-child          => First child element
        :last-child           => Last child element
        :nth-of-type          => It can select every nth occurance from specified location.
        :nth-last-of-type     => It can select every nth occurance from specified location.[top to bottom]
                    syntax:
                        nth-of-type(2n){            
                                                => every 2nd occurance starting from 2nd.
                        }
                        nth-of-last(2n+1){
                                                => every 2nd occurance starting from 1st.
                        }
                        nth-last-of-type(2n+1){
                                                => every 2nd occurance starting from bottom 1st.
                        }

    Rational Selectors:
    -------------------
        parent child {
                            => It will apply effects to all child elements in parent.
        }
        parent > child{ 
                            => apply effects to only direct child elements.
        }
        elder + sibling{
                            => Adjacant selectors
        }
        elder ~ sibling {
                            => General siblings [all elements that occur after elder]
        }
        


