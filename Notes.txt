---------------------    Styles in HTML     --------------------

- Styles are additional attributes defined for HTML elements to make the presentation more interactive and Responsive.
        <h2 align=""> Welcome</h2>

- Styles are applied to any HTML in 3 ways.
    1. Inline
    2. Embeded 
    3. External [CSS - Cascade Style Sheet]

Inline Styles:
--------------
    - syles are defined for every element individually by using a "style" attribute.
    syntax:
        <h1 style="color: red; text-align: center"></h1>

    - Inline styles are faster in rendering.
    - we can't re-use the styles.
    
    Note:
        If one is looking for styles without regular extensions[changes] and reusability then it is better to use Inline.
    
Embeded Styles:
---------------
    - styles are defined in an seperate <style> container and are kept in <head> or <body> section.

        <style>
            selector{
                attribute: value;
            }
        </style>

    - You can easily extend the styles and re-use the styles
    - But embedded styes are slow in rendering compared to inline styles
    - Embeded styles are only for a specific page. If you want the style across various pages then they are not available.
    
Note:
    - The MIME type [Multi Purpose Internet MAil Extension] for styles is 

            MIME type               Extension
            -------------           ----------------------------
            image/jpeg              .jpg, .jpeg, .jfif
            application/msword      .doc, .docx, .rtf, .txt

        - the MIME type is uesd by the rendering engine to process the code block written in page.
        - the MIME tyoe for CSS is "text/css".

    - The Media type for styles defines how to display various media content which includes screen, print and speech.
        - You can classify the content for different media devices.

        syntax:
            <style type="text/css" media=" all | screen | print | speech ">

            </style>

    - You can embed styles in both <head> and <body>. The difference between them is that the styles in head section are intended to
    load into browser momery and then accessed by page. Styles in body section are directly rendered into page, without loading into
    memory.

    - You can keep styles outside HTML scope but it is not recommended. 

Extenal styles:
---------------
    - You can write and save styles in a seperate styles style sheet with the extension ".css"
    - So that you can link the style sheet to any HTML page and access styles across pages.
    - You can use "Cascading Technique".[CSS]
    
    Note:
        - Using an external style sheet will increase the number of requests for a page and also page load time.

        - "Minification" is a coding technique followed by developers to reduce the size of the file.
          It is the process of writing logic with less code.
        - There are various minification tools, which one can use for compressing CSS file and reduce its size.

        ex: cssminifirer

        Unminified files  =>  for Development
        Minified files    =>  for production

        syntax:
                
                effects.css (unminified file)
            
            h2{
            background-color: red;
            color : white;
            text-align: center;
            }
                
                effects.min.css (minified file)
            
            h2{background-color:red; color:#fff;text-align:center;}

        - The Minified file can be modified, but it is not recommended. 
        - A "CDN" refers to "Content Delivery Network". By using CDN one can keep your CSS files in a seperate server and 
          access from any project.

----------------------  How styles take control over HTML Elements --------------

- If the styles are applied by in-line method then they are  directly directly to specific element.
        <div style="attribute:value"> </div>

- If the styles are applied by Embedded or External method then one needs the help of "Selector".
        <style type="text/css" media="all">
            Selector{

            }
        </style>


- Selector defines where to apply the given set of CSS attributes.
- Selectors are calssified into various groups
        1. Primary Selector
        2. Rational Selector
        3. Attribute Selector
        4. Structural Pseudo classes
        5. Dynamic Pseudo classes
        6. Element State Pseudo classes 
        7. Universal Selector
        8. Language Selector 
        9. Root Selector

    Primary Selector:
    -----------------
        There are three types of these Selectors
            1.Type selector
            2. ID selector
            3. Class Selector

        Type Selector:
        ----------------
            - It defines the element node name [p, b, i, img, blockquote...].
            - It will apply to every occurance of that element in page.
            - You can't ignore for any specific occurance.
            
            syntax:
                h1{                         
                    ......;
                }
            
                p{
                    .......;
                  }

        ID Selector:
        -------------
            - It is defined by using "#" reference name
            - It is accessed by using "id" attribute.
            
            syntax:
                #refName{
                    ....;
                }

                <div id="refName"> </div>

            - You can apply effects only to the required element.
            - Every element can use only "one" ID reference.
            - Hence you can't apply multiple sets of effects to one Element.

        Class Selector:
        ---------------
            - It defines effects by using ".className" reference.
            - You can access and apply by using "Class" attribute.

            Syntax:
                .className{
                    ........;
                }

                <div class="className"> </div>

            - Every element can use Multiple classes, Which are seperated with a black space.
Note:
------
    - If any element is defined with all 3 selectors, then the set of effects that will apply are as follows
    - If same set of attributes are defined then the effects will apply according to priority
            1st ID Selectors
            2nd Class Selectors
            3rd Type Selectors
    - If different set of attributes are defined then all are applied.

    - If any element is defined with styles from inline, embedded and external file techniques, then the set of effects that are applied as follows
    - If same set of attributes are defined in all 3 locations then it will apply according to priority 
            1st Inline
        `	2nd Embedded
            3rd External
    - If differrent set of attributes are defined then all are applied.
    - If similar effects are defined in embedded and external file, then it is defined by using occurance order.[LIFO] Last-In-First-Out.

    Dynamic Pseudo Classes:
    -----------------------
        - Dynamic refers to styles applied to element according to state and situation.
        - Pseudo refers to false representaion 
                link => anchor
        - class is a program template, which comprises of sample data and logic that you can implement and costumise according to requirement.
        - It allows to configure certain actions without manually writing any logic.
        - CSS Dynamic Pseudo classes are 
            :hover	 => It defines effects when mouse pointer is over the element.
            :active  => It defines effects when mouse button is down on any element.
            :link	 => It defines effects when for hyperlink in normal state.
            :target  => It defines effects when element is target of any link.
            :visited => It sets effects for visited links.

    Element State Pseudo Classes:
    ------------------------------
        :checked   => It defines effects when a radio or check box is checked
        :focus     => It defines effects when element gets focus
        :disabled  => It defines effects when element is disabled
        :enabled   => It defines effects when element disabled is false
        :read-only => It defines effects when element is set with read-only.

    Validation State Pseudo Classes:
    --------------------------------
        :required       => If element is defined with required attribute
        :optional       => If element is not defined with required
        :in-range       => If value is with in specified range [min & max]
        :out-of-range   => If value is out of range [lower and upper bound]
        :invalid        => If any validation failed
        :valid          => If validation evaluates success.

    Structural Pseudo Classes:
    ---------------------------
        :nth-chid()           =>It selects specific child by using level number or occurance name[even,odd]
                     syntax:
                            nth-child(4){

                            }
                            nth-child(even | odd){
                                        
                            }         

        :first-child          => First child element
        :last-child           => Last child element
        :nth-of-type          => It can select every nth occurance from specified location.
        :nth-last-of-type     => It can select every nth occurance from specified location.[top to bottom]
                    syntax:
                        nth-of-type(2n){            
                                                => every 2nd occurance starting from 2nd.
                        }
                        nth-of-last(2n+1){
                                                => every 2nd occurance starting from 1st.
                        }
                        nth-last-of-type(2n+1){
                                                => every 2nd occurance starting from bottom 1st.
                        }

    Rational Selectors:
    -------------------
        parent child {
                            => It will apply effects to all child elements in parent.
        }
        parent > child{ 
                            => apply effects to only direct child elements.
        }
        elder + sibling{
                            => Adjacant selectors
        }
        elder ~ sibling {
                            => General siblings [all elements that occur after elder]
        }


    Attribute Selectors
    -------------------
    - They apply effects based on the attribute of any element 
            <input type="button">
            <input type="text">
        syntax:
            element[attribute]{}	=> where ever the attribute is defined, there 							effects are applied. It dosen't require a value to 						compare.
        ex: 
            p[id]{}
        syntax:
            element[attribute=value]{} => attribute must match with value
        ex:
            input[type=text]{}

    - Attribute selector provides various conditions.
            [attribute=value]    =>  equal to/ exact match
            [attribute^=value]   =>  starts with
            [attribute$=value]   =>  ends with
            [attribute|=value]   =>  individual or start and seperated with "-"
            [attribute~=value]   =>  individual or seperated with space[any place]

    Classes with Inherit and Implement:
    -----------------------------------
        ::placeholder  => It applies effects to placeholder in input element.
        ::selection    => It applies effects to selected content on page.
        ::before	=> It sets effects to element before the current element
        ::after		=> It sets effects to elements after the current element

    - It defines the effects of a base class, which you implement and customize.
    - We can't apply all types of styles. They are restricted with specific set of styles.
    [text,backgrounds and Font Styles etc..]

        ::first-letter	=> It sets effects only for first letter in container
        ::first-line	=> It sets effects for first line in container

    Universal Selectors:
    --------------------
        *{}	=> It refers to all elements in page.
        syntax:
            <style>
                *{
                font-family:Arial;
                }
            </style>

Summary:
--------
- CSS Integration Techniques
	Inline, Embeded, External File
- CSS Selectors
	all types of selectors
- CSS Rules 
	Priority between inline, embeded and external
	Priority between type, Id and class


CSS Inheritance:
-----------------
- It is the process of implementing and inheriting the features of parent element.
- CSS automatically inherits few effects to child element based on parent.
- You can control the inheritance by using following values
        a) inherit      => Implements the parent effects, you can inherit any specific or all.
        b) initial      => Sets the default effects before the styles are implemented.
        c) unset        => It cleans up all the effects, including the pre-difined effects for element.

CSS Units:
----------
- CSS unnits are classified into 2 categories
        a) Absolute units
        b) Relative Units

- absolute units are applied to any element and they are independent, regardless parent and child hierarchy.
                    px              pixels
                    in              inch
                    cm              centimeters
                    pt              points
                    pi              picas

- Relative units are applied to child element with regard to the parent. The child element size varies according to its parent.
                    em              element size
                    rem             root element size

CSS Colors:
-----------
- Color Name
	{
	color:red;
	}
- Shade Name
	{
	color: darkred;
	}	
- Hexa Decimal
	{
	color:#ff0000; (or) #f00
	}
- RGB colors
	{
	color:rgb(red,green,blue); 0 to 255
	}
	{
	color:rgb(255,0,0);
	}
- RGBA colors
	{
	color:rgba(red, green, blue, alpha)	alpha=0 to 1
	}
	{
	color:rgba(255,0,0,0.6);
	}
- HSL colors [Hue, Saturtion, Light]
	hue		    => 0 to 360 deg color cycle  0=red, 120=green, 240=blue
	saturation	=> 0 to 100% gray shade
	light		=> 0 to 100% brightness

	{
	background-color:hsl(80, 60%, 80%);
	}
- HSLA 
	{
	background-color:hsla(80,60%,80%,0.6);
	}
- Garadiant colors
	a) Linear 
	b) Radial
	- You can set gradiant color only by using background-image Attribute.
	 linear-gradient()	=> They can have any color value [name, shade, hex, rgb...]
	 radiant-gradient()	They can use multiple colors. 
	syntax:
		{
		background-image:linear-gradiant(to right top, red, yellow, rgb(37,230,37));
		}

CSS Box Model:
--------------
    1) Margin
    2) Padding
    3) Border
    4) Width
    5) Height

    CSS Margin Attributes:
        margin              : shorthand for all directions
                                [top, right, bottom, left]

                            {
                                margin: top right bottom left;
                            }
                            {
                                margin: 0px 100px 0px 100px;    => Left and right margins
                            }
                            {
                                margin: 50px;                   => all directions 50px
                            }
        margin-left         : sets left margin 
        margin-right        : sets right margin 
        margin-top          : sets top margin 
        margin-bottom       : sets bottom margin 

    CSS Padding Attributes:
        padding         : short hand 
        padding-left 
        padding-right
        padding-top
        padding-bottom

    CSS Border attributes:
        border              : short hand for width, style, color.
                            {
                            border: 2px dotted red;
                            }
        border-style        : dotted, dashed, solid, double, groove.
        border-width        : size in pixels
        border-color        : any color

        border-left         : left short hand for width style and color
        border-left-style
        border-left-color
        border-left-width

        .... similar in all directions....

        border-image        : It sets any image as border, but it requires suitable combination of values.
                            you can set border image with combination of border
            syntax:
                {
                    border  : 10px solid colorName;
                    border-image    : url("any Path") space | stretch valueForStretch|space
                }

            Ex:
            {
                border: 20px solid transparent;
                border-image: url("images/border.gif") stretch 80;
                margin: 0px 100px 0px 100px;
                padding: 50px;
            }

        border-radius               : short hand for all directions.
        border-top-right-radius
        border-top-left-radius
        border-bottom-right-radius
        border-bottom-left-radius

CSS positions:
--------------
    position-absolute
    position-relative
    position-fixed
    position-sticky
    position-static

    Static Position:
    ----------------
    - It keeps the element according to the normal flow of the document
    - It is not effected by left, right, top and bottom values.
    - It is the defalt position for element 

    Absolute Positon:
    -----------------
    - It removes the element from the normal flow the document.
    - It can be placed at any position using left, right, top and bottom value.
    - It keeps the element attached to the content in page
    - Hence it scrolls | moves along the content
        syntax:
        -------
            .offer{
                position: absolute;
                right: 10px;
                top:50px;
            }

    Fixed Position:
    --------------
    - It removes the element from its normal flow
    - You can keep element at any position using left, right, top and bottom values.
    - It keeps your element attached to page and not to the content
    - Hence It is locked with scrolling. It will not move along with the content in page.
         syntax:
         -------
            .offer{
                position: fixed;
                right: 10px;
                top:50px;
            }

    Sticky Position:
    ----------------
    - It keeps the element according to normal flow of Document
    - It can stick the element to page after reaching specific units, which are defined by using left, right, top or bottom.
        syntax:
        --------
            dt{
                color: white;
                background-color: gray;
                width: 100px;
                position: sticky;
                top: 0px;
            }

    Relative Position:
    ------------------
    - It removes the element from the normal flow.
    - But it keeps the elements with relative to the parent.
    - Relative is the position defined for parent element
    - So that it can keep all its child elements within the content of the page.
        syntax:
        -------
            parentElement{
                position: relative;
            }
            childElement{
                position: absolute:
                top:0px;            => top and right are relative to parent not the page.
                right:0px;
            }
    
CSS Z-index:
------------
    - It is used to change the position of any element by changing the overlap order.
    - You can send back or backward.
    - You can bring front or forward.
        syntax:
        -------
        #card-1{
            background-image: url(images/a1.jpg);       => at the top of all cards
            z-index: 2;
        }
        #card-2{
            background-image: url(images/a2.jpg);          => at the middle
            margin-top:25px;
            margin-left:25px;
            z-index: 1;
        }
        #card-3{
            background-image: url(images/a3.jpg);       => at the bottom of all cards
            margin-top:50px;
            margin-left:50px;
            z-index: 0;
        }

CSS Float and Clear:
--------------------
    - Float allows to set text wrapping with regard to element in page.
    - It have two positions     
        a) float-left
        b) float-right

    - The float effect will span to next occuring element, which you have to disable by using "clear"
        a) clear-left
        b) clear-right
        c) clear-both

        syntax:
        -------
            img{
               float:left;
            }

CSS Display:
------------
- none
- inline
- block
- grid
- flex  

    display: none   
        - It can hide element and adjust the adjacent elements into the place of hidden element
            h2{
                display: none;
            }

    note:
    ---- 
        - Visibility: hidden => will hide the element but keep the space allocated for element.
        - display: none      => removes allocated space for element.

    display: inline
        - It is used for elements to arrange them side-by-side.
        - It is not applied for the container but for the individual elements.
        syntax:
            ul{
                display: inline;     //invalid   => ul is a container for <li>
            }

            li{
                display:inline;     //valid
            }

    display: block
        - It keeps the elements arranged in one column.
        - It is one below another.
        syntax:
            nav span{
                display:block;
            }

    display: flex
        - It is used for container that contains elements.
        - It is not for individual elements 
        syntax:
            li{
                display: flex;          // invalid 
            }

            ul{
                display: flex;          // valid
            }

        - flex provies alignment to keep all elements aligned horizontally and vertically
            justify-content     : center, space-between, space-around
            align-items         : baseline, center, top

        - The orientation of elements depends on flex direction.
            flex-direction      : row, row-reverse, column, column-reverse.

        - The wrapping of content in container is controlled by 
            flex-wrap       : wrap, no-wrap 

        note:
        ----
            - flex-direction        : It sets rows and column wise content, which can display in reverse order.
                                        a) row
                                        b) row-reverse
                                        c) column
                                        d) column-reverse
            - flex-wrap             : It defines in how many rows and columns the container elements can display. It depsnds on width 
                                        and height of container.

Display Grid:
-------------
- Display grid allows to arrange content into rows and columns, which can change dynamically.
    display: grid
    grid-template-column
    grid-row
    grid-column
    grid-gaps

- If you want to create responsive page with orientation, then you need CSS "media" queries.
- Media queries can identify the device and its orientation.

CSS Columns:
------------
- It splits your contet into multiple columns.
- Grid is used for arranging content into rows and columns.
- Column is is used for continuous columns without overflowing of data.
- Style Attributes:
        columns             : It specifies the number of columns to deisplay
        column-width        : sets width of columns
        column-gap          : sets space between columns
        column-span         : It can merge columns
        column-rule         : It sets a seperator line for columns 

    Note: 
        Span can merge all columns only. You can't merge specified number of columns.
        If you are displaying a numbering list in columns
            a) Side byy side numbering  => Display Grid
            b) Numbering in Columns     => columns 

        syntax:
        -------
            ol{
                display:grid;
                grid-template-columns:6fr 6fr;

            }

            1.HTML                          2.CSS
            3.Bootstrap                     4.JavaScript 

            ol{
                coumns:2;
            }

            1.HTML                          3.Bootstrap
            2.CSS                           4.JavaScript

CSS Backgrounds:
---------------
background-color                : sets a color 
background-image                : sets background image and gradiant colors
background-positions            : Location of background image 
background-size                 : size of background image, contain, cover 
background-repeat               : no-repeat, repeat-x, repeat-y
background-attachment           : scroll, fixed 

- we can set multiple background images by using the below syntax   
        body{
            background-image:url("image1"), url("image2");
            background-repeat: no-repeat , repeat;
            background-size: 400px 400px, 200px 200px;
            background-position: center center;
            background-attachment: fixed, scroll;
        }

CSS Text Effects:
----------------
    Font Attributes:
        font-size
        font-family
        font-weight[bold]
        font-style[italic]
        font-variant[capitilization]: small-caps => converts to capitals

    Text Attributes:
        text-align              : left,center,right, justify
        text-decoration         : It is a short hand for line, style, color
                                    line: underline, overline, linethrough
                                    style: double, dotted, wavy
                                    color: any line color
        text-transform          : uppercase, lowercase, captilize[Title case]
        text-indent             : It sets space for first line in paragraph.
        
    Word and Character Attributes: 
        letter-spacing          : It sets space b/w chars
        line-height             : It sets space b/w lines
        word-spacing            : It sets space b/w words
        word-break              : It breakes the words that occur in right margin
        word-wrap               : It controls the breaking of the word at right edge
        white-space             : It removes the wrapping of texxt in container 
        text-overflow           : It controls the overflowingg text using styles 
    
    EX: How to display more content in container using overflow?
        1. set width for container          "width:500px"
        2. Add border to container          "border:2px solid black"
        3. Remove wrapping of text          "white-space:nowrap"
        4. Hide Overflowing text            "overflow:hidden"
        5. Set a symbol for text overflow   "text-overflow:ellipis"
    
    syntax:
        p{
            width:300px;
            border:2px solid black;
            white-space: nowrap;
            overflow:hidden;
            text-overflow:ellipsis;
        }

CSS List Styles:
----------------
list-style          : short hand for all effects
list-style-type     : It sets vsrious ordered and unordered styles.
list-style-image    : It sets a custom image
list-style-position : It sets position inside or outside border.

CSS Overflow:
-------------
hidden      : Hides the overflowing content in container
scroll      : sets a scrollbar horizontally and vertically 
auto        : sets a scrollbar if necessary

CSS 2D Transforms:
------------------
- 2D Transforms are 2 Dimensional transformations along x and y axis.
- They are used to control location, size, and orientation.
- CSS 2D Tansformations are 
        translate()
        scale()
        skew()
        rotate()
        matrix()
- They are definrd by using "transform" attribute.

syntax:
        transform   : translate()
        transform   : scale()

note: 
    Transform can't work on various legacy browsers. Hence you have to apply transformation by using additional 
    plugins.
        -webkit-transform       => safari, edge..
        -moz-transform          => firefox
        -0-transform            => opera
        -ms-transform           => Internet Explorer

    syntax:
        {
            transform: translate();
            -webkit-transform: translate();
            -moz-transform: translate();
            -0-transform: translate();
            -ms-transform: translate();
        }

    Translate:
        - It is a method used to change the position of element along "x and Y" axis.
                a) translate()      shorthand
                b) translateX()     along x-axis horizontally
                c) translateY()     along y-axis vertically 

    Scale:
        - It changes the size of the element along X and Y axis.
            a) scale()          short hand
            b) scaleX()         width 
            c) scaleY()         height 
        - Units are defined using integer value 1 = 100%
        syntax:
            transform : scale(1);
        
    Skew:
        - It is used to tilt element by specified angle.
            a) skew()       shorthand
            b) skewX()      
            c) skewY()
        - The units are defined by using "deg"
            syntax:
                transform: skewX(20deg);
                transform: skewY(-20deg);
            
    Rotate:
        - It rotates the element by specified angle.
            a) rotate()        shorthand
            b) rotateX()       
            c) rotateY()

            